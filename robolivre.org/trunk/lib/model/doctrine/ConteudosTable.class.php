<?php

/**
 * ConteudosTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ConteudosTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object ConteudosTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Conteudos');
    }

    public function buscaPorId($idConjunto,$idConteudo=null){
        
        $id_usuario_logado = UsuarioLogado::getInstancia()->getIdUsuario();
        $query = "SELECT IF (p.aceito is not null,p.aceito,null) as \"participante\",c.*,
        i.id_conjunto as \"i.id_conjunto\",i.id_tipo_conjunto as \"i.id_tipo_conjunto\",i.id_usuario AS \"i.id_usuario\",i.imagem_perfil AS \"i.imagem_perfil\",
        t.id_tipo_permissao_conjunto as \"t.id_tipo_permissao_conjunto\",
        u.nome as \"u.nome\"
        FROM conteudos c 
        LEFT JOIN conjuntos i ON c.id_conjunto = i.id_conjunto AND c.id_tipo_conjunto = i.id_tipo_conjunto 
        LEFT JOIN participantes_conjuntos p ON p.id_usuario = $id_usuario_logado AND p.id_conjunto = i.id_conjunto AND p.id_tipo_conjunto = i.id_tipo_conjunto
        LEFT JOIN tipos_permissoes_conjuntos t ON t.id_tipo_permissao_conjunto = p.id_tipo_permissao_conjunto       
        LEFT JOIN usuarios u ON i.id_usuario = u.id_usuario
        WHERE c.id_conjunto = $idConjunto";
        
        if($idConteudo!=null){
            $query .= " AND c.id_conteudo = $idConteudo";
        }
        
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  

        $statement = $connection->prepare($query);
        // Make Statement  

        $statement->execute();
        // Execute Query  

        $resultado = $statement->fetchAll();
        
//        Util::pre($statement);
//        Util::pre($resultado,true);
        
        if ($resultado) {
            foreach ($resultado as $reg) {
                $conteudo = new Conteudos();

                $conteudo->setIdConteudo($reg['id_conteudo']);
                $conteudo->setIdTipoConjunto($reg['id_tipo_conjunto']);
                $conteudo->setIdConjunto($reg['id_conjunto']);
                $conteudo->setIdSuperTipo($reg['id_super_tipo']);
                $conteudo->setNome($reg['nome']);
                $conteudo->setDescricao($reg['descricao']);
                $conteudo->setEnviarEmailCriador($reg['enviar_email_criador']);
                $conteudo->setNomeRepositorioGithub($reg['nome_repositorio_github']);
                
                $conjunto = new Conjuntos();
                $conjunto->setIdConjunto($reg['i.id_conjunto']);
                $conjunto->setIdUsuario($reg['i.id_usuario']);
                $conjunto->setIdTipoConjunto($reg['i.id_tipo_conjunto']);
                $conjunto->setImagemPerfil($reg['i.imagem_perfil']);

                $conteudo->setConjunto($conjunto);
                $conteudo->setNomeProprietario($reg['u.nome']);

                if($conjunto->getIdUsuario()==UsuarioLogado::getInstancia()->getIdUsuario()){
                    $conteudo->setTipoUsuario(Conteudos::PROPRIETARIO);
                }else{
                    $conteudo->setTipoUsuario($reg['t.id_tipo_permissao_conjunto']);
                    if($reg['participante']==null){
                        $conteudo->setTipoSolicitacao(Conteudos::SEM_SOLICITACAO);
                    }else{
                        $conteudo->setTipoSolicitacao($reg['participante']);
                    }
                }
                return $conteudo;
            }
        }
    }
    
    public function gravarConteudo(Conteudos $conteudo) {
        $query = "
        INSERT INTO conjuntos (id_usuario, id_tipo_conjunto) VALUES (" . UsuarioLogado::getInstancia()->getIdUsuario() . ", " . TiposConjuntos::CONTEUDO . ");
        INSERT INTO conteudos (id_conjunto, id_tipo_conjunto,nome,descricao,enviar_email_criador)
            VALUES (LAST_INSERT_ID(), " . TiposConjuntos::CONTEUDO . ",'" . $conteudo->getNome() . "','" . $conteudo->getDescricao() . "','" . $conteudo->getEnviarEmailCriador() . "')";
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  
        $statement = $connection->prepare($query);
        // Make Statement  
        $statement->execute();
        
        $id = $connection->lastInsertId();
        
//        $objPublicacao
//        $objPublicacao->setDataPublicacao(date('Y-m-d H:i:s'));
//        if( $request->getParameter('id_publicacao_original')!= "" && $request->getParameter('id_usuario_original') != ""){ 
//            $objPublicacao->setIdUsuarioOriginal ($request->getParameter('id_usuario_original'));
//            $objPublicacao->setIdPublicacaoOriginal($request->getParameter('id_publicacao_original'));
//        }
//        
//        if($request->getParameter('id_conjunto')!=""){
//            $objPublicacao->setIdConjunto($request->getParameter('id_conjunto'));
//        }
//        
////        Util::pre($objPublicacao, true);
//        $objPublicacao->save();
        
        $query = "SELECT c.*,
        u.id_conjunto as \"u.id_conjunto\",u.id_tipo_conjunto as \"u.id_tipo_conjunto\",u.id_usuario AS \"u.id_usuario\",u.imagem_perfil AS \"u.imagem_perfil\"
        FROM conteudos c 
        LEFT JOIN conjuntos u ON c.id_conjunto = u.id_conjunto AND c.id_tipo_conjunto = u.id_tipo_conjunto 
        WHERE id_conteudo = $id";
        
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  

        $statement = $connection->prepare($query);
        // Make Statement  

        $statement->execute();
        // Execute Query  

        $resultado = $statement->fetchAll();
        
//        Util::pre($resultado,true);
        
        if ($resultado) {
            foreach ($resultado as $reg) {
                $conteudo = new Conteudos();

                $conteudo->setIdConteudo($reg['id_conteudo']);
                $conteudo->setIdTipoConjunto($reg['id_tipo_conjunto']);
                $conteudo->setIdConjunto($reg['id_conjunto']);
                $conteudo->setIdSuperTipo($reg['id_super_tipo']);
                $conteudo->setNome($reg['nome']);
                $conteudo->setDescricao($reg['descricao']);
                $conteudo->setEnviarEmailCriador($reg['enviar_email_criador']);
                $conteudo->setNomeRepositorioGithub($reg['nome_repositorio_github']);
                
                $conjunto = new Conjuntos();
                $conjunto->setIdConjunto($reg['u.id_conjunto']);
                $conjunto->setIdUsuario($reg['u.id_usuario']);
                $conjunto->setIdTipoConjunto($reg['u.id_tipo_conjunto']);
                $conjunto->setImagemPerfil($reg['u.imagem_perfil']);

                $conteudo->setConjunto($conjunto);
                $conteudo->setTipoUsuario(Conteudos::PROPRIETARIO);
                $conteudo->setNomeProprietario(UsuarioLogado::getInstancia()->getNome());
                return $conteudo;
            }
        }
    }

    public function getConteudosListagem() {

        $arrayRetorno = array();

        $q = Doctrine_Query::create()
                ->select('*')
                ->from('Conteudos')
                ->leftJoin("Conjuntos");
        

        $resultado = $q->fetchArray();

        if ($resultado) {
            foreach ($resultado as $reg) {
                $conteudo = new Conteudos();

                $conteudo->setIdConteudo($reg['id_conteudo']);
                $conteudo->setIdTipoConjunto($reg['id_tipo_conjunto']);
                $conteudo->setIdConjunto($reg['id_conjunto']);
                $conteudo->setIdSuperTipo($reg['id_super_tipo']);
                $conteudo->setNome($reg['nome']);
                $conteudo->setDescricao($reg['descricao']);
                $conteudo->setEnviarEmailCriador($reg['enviar_email_criador']);
                $conteudo->setNomeRepositorioGithub($reg['nome_repositorio_github']);

                $arrayRetorno[] = $conteudo;
            }
        }

        return $arrayRetorno;
    }

}